#!/usr/bin/env node

/**
 * Script para aplicar migra√ß√µes do PostgreSQL local
 * Sistema de migra√ß√£o para PostgreSQL local
 */

const fs = require('fs');
const path = require('path');
const { Pool } = require('pg');
require('dotenv').config();

// Configura√ß√£o do banco PostgreSQL local
const pool = new Pool({
  host: process.env.POSTGRES_HOST || 'localhost',
  port: process.env.POSTGRES_PORT || 5432,
  database: process.env.POSTGRES_DB || 'erp_pizzaria',
  user: process.env.POSTGRES_USER || 'postgres',
  password: process.env.POSTGRES_PASSWORD || '134679',
  ssl: process.env.POSTGRES_SSL === 'true'
});

// Diret√≥rio de migra√ß√µes
const MIGRATIONS_DIR = path.join(__dirname, '..', 'migrations');

/**
 * Criar tabela de controle de migra√ß√µes
 */
async function createMigrationsTable() {
  const query = `
    CREATE TABLE IF NOT EXISTS schema_migrations (
      id SERIAL PRIMARY KEY,
      filename VARCHAR(255) UNIQUE NOT NULL,
      applied_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
      checksum VARCHAR(64) NOT NULL
    );
    
    CREATE INDEX IF NOT EXISTS idx_schema_migrations_filename 
    ON schema_migrations(filename);
  `;
  
  await pool.query(query);
  console.log('‚úÖ Tabela de controle de migra√ß√µes criada/verificada');
}

/**
 * Calcular checksum de um arquivo
 */
function calculateChecksum(content) {
  const crypto = require('crypto');
  return crypto.createHash('sha256').update(content).digest('hex');
}

/**
 * Obter migra√ß√µes j√° aplicadas
 */
async function getAppliedMigrations() {
  try {
    const result = await pool.query(
      'SELECT filename, checksum FROM schema_migrations ORDER BY applied_at'
    );
    return new Map(result.rows.map(row => [row.filename, row.checksum]));
  } catch (error) {
    console.log('‚ö†Ô∏è Tabela de migra√ß√µes n√£o existe ainda');
    return new Map();
  }
}

/**
 * Obter arquivos de migra√ß√£o
 */
function getMigrationFiles() {
  if (!fs.existsSync(MIGRATIONS_DIR)) {
    console.log('‚ö†Ô∏è Diret√≥rio de migra√ß√µes n√£o encontrado:', MIGRATIONS_DIR);
    return [];
  }
  
  return fs.readdirSync(MIGRATIONS_DIR)
    .filter(file => file.endsWith('.sql'))
    .sort(); // Ordenar alfabeticamente
}

/**
 * Aplicar uma migra√ß√£o
 */
async function applyMigration(filename) {
  const filePath = path.join(MIGRATIONS_DIR, filename);
  const content = fs.readFileSync(filePath, 'utf8');
  const checksum = calculateChecksum(content);
  
  console.log(`üîÑ Aplicando migra√ß√£o: ${filename}`);
  
  try {
    // Executar a migra√ß√£o em uma transa√ß√£o
    await pool.query('BEGIN');
    
    // Executar o SQL da migra√ß√£o
    await pool.query(content);
    
    // Registrar a migra√ß√£o como aplicada
    await pool.query(
      'INSERT INTO schema_migrations (filename, checksum) VALUES ($1, $2)',
      [filename, checksum]
    );
    
    await pool.query('COMMIT');
    console.log(`‚úÖ Migra√ß√£o aplicada com sucesso: ${filename}`);
    
  } catch (error) {
    await pool.query('ROLLBACK');
    console.error(`‚ùå Erro ao aplicar migra√ß√£o ${filename}:`, error.message);
    throw error;
  }
}

/**
 * Verificar se uma migra√ß√£o foi modificada
 */
function isMigrationModified(filename, appliedChecksum) {
  const filePath = path.join(MIGRATIONS_DIR, filename);
  const content = fs.readFileSync(filePath, 'utf8');
  const currentChecksum = calculateChecksum(content);
  
  return currentChecksum !== appliedChecksum;
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  try {
    console.log('üöÄ Iniciando aplica√ß√£o de migra√ß√µes PostgreSQL...');
    console.log('üìÅ Diret√≥rio de migra√ß√µes:', MIGRATIONS_DIR);
    
    // Testar conex√£o
    await pool.query('SELECT NOW()');
    console.log('‚úÖ Conex√£o com PostgreSQL estabelecida');
    
    // Criar tabela de controle
    await createMigrationsTable();
    
    // Obter migra√ß√µes aplicadas e arquivos dispon√≠veis
    const appliedMigrations = await getAppliedMigrations();
    const migrationFiles = getMigrationFiles();
    
    console.log(`üìä Migra√ß√µes encontradas: ${migrationFiles.length}`);
    console.log(`üìä Migra√ß√µes j√° aplicadas: ${appliedMigrations.size}`);
    
    if (migrationFiles.length === 0) {
      console.log('‚ö†Ô∏è Nenhuma migra√ß√£o encontrada');
      return;
    }
    
    let appliedCount = 0;
    let skippedCount = 0;
    let modifiedCount = 0;
    
    // Processar cada arquivo de migra√ß√£o
    for (const filename of migrationFiles) {
      if (appliedMigrations.has(filename)) {
        // Verificar se a migra√ß√£o foi modificada
        if (isMigrationModified(filename, appliedMigrations.get(filename))) {
          console.log(`‚ö†Ô∏è Migra√ß√£o modificada detectada: ${filename}`);
          console.log(`   Use --force para reaplicar migra√ß√µes modificadas`);
          modifiedCount++;
        } else {
          console.log(`‚è≠Ô∏è Migra√ß√£o j√° aplicada: ${filename}`);
          skippedCount++;
        }
      } else {
        // Aplicar nova migra√ß√£o
        await applyMigration(filename);
        appliedCount++;
      }
    }
    
    // Resumo
    console.log('\nüìã Resumo da execu√ß√£o:');
    console.log(`   ‚úÖ Migra√ß√µes aplicadas: ${appliedCount}`);
    console.log(`   ‚è≠Ô∏è Migra√ß√µes ignoradas: ${skippedCount}`);
    console.log(`   ‚ö†Ô∏è Migra√ß√µes modificadas: ${modifiedCount}`);
    
    if (appliedCount > 0) {
      console.log('\nüéâ Migra√ß√µes aplicadas com sucesso!');
    } else if (modifiedCount > 0) {
      console.log('\n‚ö†Ô∏è Algumas migra√ß√µes foram modificadas ap√≥s serem aplicadas');
    } else {
      console.log('\n‚ú® Todas as migra√ß√µes j√° est√£o aplicadas');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a aplica√ß√£o de migra√ß√µes:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

/**
 * Fun√ß√£o para for√ßar reaplica√ß√£o de migra√ß√µes
 */
async function forceApplyMigrations() {
  try {
    console.log('üîÑ Modo FORCE: Reaplicando todas as migra√ß√µes...');
    
    // Limpar tabela de migra√ß√µes
    await pool.query('DELETE FROM schema_migrations');
    console.log('üóëÔ∏è Hist√≥rico de migra√ß√µes limpo');
    
    // Aplicar todas as migra√ß√µes novamente
    await main();
    
  } catch (error) {
    console.error('‚ùå Erro no modo force:', error.message);
    process.exit(1);
  }
}

/**
 * Fun√ß√£o para listar status das migra√ß√µes
 */
async function listMigrations() {
  try {
    console.log('üìã Status das migra√ß√µes:');
    
    const appliedMigrations = await getAppliedMigrations();
    const migrationFiles = getMigrationFiles();
    
    console.log('\n' + '='.repeat(80));
    console.log('ARQUIVO'.padEnd(40) + 'STATUS'.padEnd(20) + 'APLICADA EM');
    console.log('='.repeat(80));
    
    for (const filename of migrationFiles) {
      if (appliedMigrations.has(filename)) {
        const isModified = isMigrationModified(filename, appliedMigrations.get(filename));
        const status = isModified ? '‚ö†Ô∏è MODIFICADA' : '‚úÖ APLICADA';
        
        // Obter data de aplica√ß√£o
        const result = await pool.query(
          'SELECT applied_at FROM schema_migrations WHERE filename = $1',
          [filename]
        );
        const appliedAt = result.rows[0]?.applied_at?.toISOString().split('T')[0] || 'N/A';
        
        console.log(filename.padEnd(40) + status.padEnd(20) + appliedAt);
      } else {
        console.log(filename.padEnd(40) + '‚è≥ PENDENTE'.padEnd(20) + '-');
      }
    }
    
    console.log('='.repeat(80));
    
  } catch (error) {
    console.error('‚ùå Erro ao listar migra√ß√µes:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// Processar argumentos da linha de comando
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
  console.log(`
üìö Script de Migra√ß√µes PostgreSQL

Uso:
  node apply-migrations.js [op√ß√µes]

Op√ß√µes:
  --force, -f     Reaplicar todas as migra√ß√µes (CUIDADO!)
  --list, -l      Listar status das migra√ß√µes
  --help, -h      Mostrar esta ajuda

Exemplos:
  node apply-migrations.js              # Aplicar migra√ß√µes pendentes
  node apply-migrations.js --list        # Listar status
  node apply-migrations.js --force       # Reaplicar todas (CUIDADO!)
`);
  process.exit(0);
}

if (args.includes('--force') || args.includes('-f')) {
  forceApplyMigrations();
} else if (args.includes('--list') || args.includes('-l')) {
  listMigrations();
} else {
  main();
}